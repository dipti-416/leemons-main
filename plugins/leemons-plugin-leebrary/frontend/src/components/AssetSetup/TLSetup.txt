const TLSetup = () => {
  const totalLayoutProps = useTotalLayout();
  const [openModal, setOpenModal] = React.useState(false);
  const [modalContent, setModalContent] = React.useState({ title: '', body: '', action: null });

  const initialStepsInfo = [
    {
      label: 'Basic Data',
      badge: null,
      status: null,
      showStep: true, // Define if by default this step must be shown, it's expected/recommended that the fisrt step is always set to true
      validationSchema: z.object({
        title: z.string({ required_error: 'Title is required' }).min(1),
        description: z.string().optional(),
        program: z.string().optional(),
        tags: z.string().optional(),
        color: z.string().optional(),
      }),
      // Steps can use the any form methods with the useFormContext hook (from react-hook-form)
      stepComponent: <BasicDataForm key={'basicDataForm'} />,
    },
    {
      label: 'Content',
      badge: null,
      status: null,
      showStep: true,
      validationSchema: z.object({
        instructions: z.string({ required_error: 'Instructions are required' }).min(1),
        deliverables: z.boolean().optional(),
      }),
      stepComponent: <ContentForm key={'contentForm'} />,
    },
    {
      label: 'Optional',
      badge: null,
      status: null,
      showStep: false,
      validationSchema: z.object({
        optionalField: z.string().min(1),
      }),
      stepComponent: <OptionalForm key={'optionalForm'} />,
    },
    {
      label: 'tal cosa',
      badge: null,
      status: null,
      showStep: true,
      validationSchema: z.object({}),
    },
  ];

  // Prepare Form
  const formMethods = useForm({
    resolver: zodResolver(initialStepsInfo[totalLayoutProps.activeStep]?.validationSchema),
  });
  const formValues = formMethods.watch();

  React.useEffect(() => {
    if (formValues.addOptionalStep !== undefined) {
      const current = [...totalLayoutProps.stepsInfo];
      const updatedStepsInfo = current.map((step, i) =>
        i === 2 ? { ...step, showStep: formValues.addOptionalStep } : step,
      );
      totalLayoutProps.setStepsInfo(updatedStepsInfo);
    }
  }, [formValues.addOptionalStep]);

  // Prepare dynamic modal. Total Layout only handles the "global" cancel modal
  const renderActionModal = ({ title, body, action }) => (
    <Modal title={title} opened={openModal} onClose={() => setOpenModal(false)}>
      <Box>
        <Paragraph>{body}</Paragraph>
      </Box>
      <Stack fullWidth justifyContent="space-between" style={{ marginTop: 16 }}>
        <Button variant="light" onClick={() => setOpenModal(false)}>
          Cancel
        </Button>
        <Button
          onClick={() => {
            if (action) action();
            setOpenModal(false);
          }}
        >
          Confirm
        </Button>
      </Stack>
    </Modal>
  );

  // Prepare Header. It is necesary to pass the setOpenCancelModal function to the header
  const onCancel = () => {
    console.log('Redirecting after cancel');
  };

  const buildHeader = () => (
    <TotalLayoutHeader
      title={'Nueva Tarea'}
      icon={<PluginAssignmentsIcon />}
      formTitlePlaceholder={'TÃ­tulo de la tarea'}
      setOpenCancelModal={totalLayoutProps.setOpenCancelModal}
    />
  );

  // Prepare Actions. TotalLayout validates the form on every step and for every action
  const saveDraft = async () => {
    console.log('Form values to SAVE as draft', formValues);
  };

  const handleOnSave = () => {
    setModalContent({
      title: 'Guardar Borrador',
      body: 'Guardando Borrador',
      action: saveDraft,
    });
    setOpenModal(true);
  };

  const handlePublish = async () => {
    console.log('Form values to PUBLISH:', formValues);
  };

  const handlePublishAndAssign = async () => {
    console.log('Form values to PUBLISH AND ASSIGN:', formValues);
  };

  const handlePreview = async () => {
    console.log('Form values to PREVIEW:', formValues);
  };

  // Define common footer action labels
  const footerActionsLabels = {
    back: 'Anterior',
    save: 'Guardar borrador',
    next: 'Siguiente',
    dropdownLabel: 'Dropdown final',
  };

  // Footer Final actions: When more than one action is defined, a dropdown button will be shown
  const footerFinalActions = [
    { label: 'Publicar', action: handlePublish },
    { label: 'Publicar y Asignar', action: handlePublishAndAssign },
    { label: 'Vista previa', action: handlePreview },
  ];

  // Alternatively, define only one action for it to be shown as a button
  // const handleFinalize = async () => {
  //   console.log('FINALIZE WITH SINGLE ACTION, form values =>', formValues);
  // };
  // const footerFinalAction = [{ label: 'Finalize with single action', action: handleFinalize }];

  return (
    <>
      {/* Modal - Implemented at the page level */}
      {renderActionModal(modalContent)}
      <FormProvider {...formMethods}>
        <Box style={{ margin: '-16px' }}>
          <TotalLayout
            {...totalLayoutProps}
            Header={() => buildHeader()}
            showStepper
            footerActionsLabels={footerActionsLabels}
            footerFinalActions={footerFinalActions}
            minStepNumberForDraftSave={1}
            onSave={handleOnSave}
            initialStepsInfo={initialStepsInfo}
            onCancel={onCancel}
          />
        </Box>
      </FormProvider>
    </>
  );
};
